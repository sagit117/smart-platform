/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "src_dictionary__ru_ts";
exports.ids = ["src_dictionary__ru_ts"];
exports.modules = {

/***/ "./src/dictionary/_ru.ts":
/*!*******************************!*\
  !*** ./src/dictionary/_ru.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _ru)\n/* harmony export */ });\nclass _ru {\n    constructor() {\n        this._errorMessage = {\n            server: {\n            // notAllowedCORS: '⚡️[server]: Запрещено настройками CORS',\n            // notFound: '⚡️[server]: Ресурс не найден',\n            // accessDenied: '⚡️[server]: В доступе отказано',\n            },\n            dataBase: {\n            // createRoute: '⚡️[DB]: Ошибка при создание записи маршрута: ',\n            // connectionOn: '⚡️[DB]: Ошибка подключения к mongodb: ',\n            // createRequestLog: '⚡️[DB]: Ошибка при сохранение данных в лог подключения: ',\n            // lastTryRegistry: '⚡️[DB]: Ошибка при запросе попследней попытке регистрации: ',\n            // lastTryRestorePass: '⚡️[DB]: Ошибка при запросе попследней попытке восстановить пароль: ',\n            // lastTryChangePass: '⚡️[DB]: Ошибка при запросе попследней попытке изменить пароль: ',\n            // createUser: '⚡️[DB]: Ошибка при сохранение данных пользователя: ',\n            // searchForUsersByEmail: '⚡️[DB]: Ошибка при запросе поиска пользователей по email: ',\n            // checkingPassDuringLogin: '⚡️[DB]: Ошибка при проверки пароля во время логина: ',\n            // changeRoleUser: '⚡️[DB]: Ошибка при попытке сменить роль пользователя: ',\n            // confirmEmail: '⚡️[DB]: Ошибка при попытке подтвердить email: ',\n            // createErrorsLog: '⚡️[DB]: Ошибка при попытке сохранить в БД лог ошибки: ',\n            // createEventsLog: '⚡️[DB]: Ошибка во время сохранения лога события: ',\n            // searchForUsersByHash: '⚡️[DB]: Ошибка при запросе поиска пользователей по хеш-коду: '\n            },\n            auth: {\n            // emailExists: 'Указанный email уже зарегистрирован!',\n            // emailNotExists: 'Указанный email не существует',\n            // emailIsWrong: 'Введите корректный email!',\n            // lastTryQuery: 'Перед повторным запросом должно пройти некоторое время!',\n            // onPrepare: 'Произошла ошибка во время выполнения операции!',\n            // passwordOrEmailIsWrong: 'Указанный email или пароль не совпадает!',\n            // hashIsWrong: 'Хэш-код не действителен'\n            },\n            errors: {\n            // sendEmail(to: string): string {\n            //     return `Ошибка при отправке email получателю ${to}: `\n            // }\n            }\n        };\n        this._successMessage = {\n            server: {\n            // serverIsRunning: `⚡️[server]: Сервер запущен на ${APP.address.HOST}:${APP.address.PORT}`,\n            // serverIsWaiting: `⚡️[server]: Сервер ожидает подключения...`,\n            // accessSuccess: '⚡️[server]: Пользователь авторизован!'\n            },\n            dataBase: {\n            // createRoute: '⚡️[DB]: Создана запись маршрута: ',\n            // connectionOn: '⚡️[DB]: Соединение с mongodb установлено',\n            },\n            auth: {\n            // registry: 'Регистрация прошла успешно!',\n            // auth: 'Пользователь авторизован!',\n            // restorePassword: 'Запрос на восстановление доступа обработан',\n            // changePassword: 'Пароль изменен',\n            }\n        };\n        this._eventsName = {\n        // registryUser: 'Регистрация пользователя',\n        // sendEmail: 'Отправки письма',\n        // login: 'Пользователь вошел в систему',\n        // restorePassword: 'Запрос сброса пароля',\n        // changePassword: 'Смена пароля',\n        };\n        this._emailSubjects = {\n        // confirmEmail: 'Подтверждение адреса электронной почты',\n        // accountLogin: 'Вход в систему',\n        // restorePassword: 'Восстановление пароля'\n        };\n        this._routeTitles = {\n        // configurator: 'Конфигуратор',\n        // confirmEmail: 'Подтверждение email'\n        };\n        this._emailTemplates = {\n        // confirmEmailTemplate(hash: string = ''): string {\n        //     if (!hash) return ``\n        //\n        //     return `\n        //         <h3> Здравствуйте! </h3>\n        //         <p>\n        //             Для подтверждения регистрации на сайте www.${APP.address.HOST}, перейдите по\n        //             <b>\n        //                 <a\n        //                     href=\"${APP.address.PROTOCOL}://${APP.address.HOST}${APP.address.PORT\n        //                         ? ':' + APP.address.PORT\n        //                         : ''}/confirm_email/${hash}\">\n        //                         ссылке\n        //                </a>\n        //             </b>.\n        //         </p>\n        //         <p> Если Вы не регистрировались на сайте www.${APP.address.HOST}, просто проигнорируйте данное письмо.</p>\n        //     `\n        // },\n        // accountLogin(): string {\n        //     return `\n        //         <h3> Здравствуйте! Вы вошли в аккаунт на сайте www.${APP.address.HOST}</h3>\n        //\n        //         <p>\n        //             Если это были не Вы,\n        //             <b>\n        //                 <a\n        //                     href=\"${APP.address.PROTOCOL}://${APP.address.HOST}${APP.address.PORT\n        //                         ? ':' + APP.address.PORT\n        //                         : ''}/change-password\">\n        //                         смените пароль\n        //                </a>\n        //             </b>.\n        //         </p>\n        //\n        //     `\n        // },\n        // restorePassword(hash: string = ''): string {\n        //     return `\n        //         <h3> Здравствуйте! </h3>\n        //         <p>\n        //             Вы запросили восстановление доступа к сайту www.${APP.address.HOST}, для этого перейдите по\n        //             <b>\n        //                 <a\n        //                     href=\"${APP.address.PROTOCOL}://${APP.address.HOST}${APP.address.PORT\n        //                         ? ':' + APP.address.PORT\n        //                         : ''}/reset-password/${hash}\">\n        //                         ссылке\n        //                </a>\n        //             </b>.\n        //         </p>\n        //         <p> Если Вы не запрашивали восстановление доступа к сайту www.${APP.address.HOST}, просто проигнорируйте данное письмо.</p>\n        //     `\n        // }\n        };\n    }\n    // getters\n    getServerSuccessMessage() {\n        return this._successMessage.server;\n    }\n    getServerErrorMessage() {\n        return this._errorMessage.server;\n    }\n    // public getDataBaseSuccessMessage() {\n    //     return this._successMessage.dataBase\n    // }\n    getDataBaseErrorMessage() {\n        return this._errorMessage.dataBase;\n    }\n    getAuthErrorMessage() {\n        return this._errorMessage.auth;\n    }\n    getAuthSuccessMessage() {\n        return this._successMessage.auth;\n    }\n    getEventsName() {\n        return this._eventsName;\n    }\n    getEmailSubjects() {\n        return this._emailSubjects;\n    }\n    getRouteTitles() {\n        return this._routeTitles;\n    }\n    getEmailTemplates() {\n        return this._emailTemplates;\n    }\n    getErrorMessage() {\n        return this._errorMessage.errors;\n    }\n}\n\n\n//# sourceURL=webpack://smart-platform/./src/dictionary/_ru.ts?");

/***/ })

};
;